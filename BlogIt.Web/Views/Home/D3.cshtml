@model BlogIt.Web.Models.Shared.BaseViewModel

@{
    ViewBag.Title = "D3 Demo";
}

@Scripts.Render("~/bundles/d3")

<script>
    $(function () {
        Example1();
        Example2();
        Example3();
        Example4();
        Example5();
        Example6();
        Example7();
        Example8();
    });

    function Example1() {
        // Adding an SVG element
        var bodySelection = d3.select(".row1");

        var svgSelection = bodySelection.append("svg")
            .attr("width", 50)
            .attr("height", 50);

        var circleSelection = svgSelection
            .append("circle")
            .attr("cx", 25)
            .attr("cy", 25)
            .attr("r", 25)
            .style("fill", "purple");
    }

    function Example2() {
        // Data binding
        var circleRadii = [40, 20, 10];

        var svgContainer = d3.select(".row1")
            .append("svg")
            .attr("width", 200)
            .attr("height", 200);

        var circles = svgContainer.selectAll("circle")
            .data(circleRadii)
            .enter()
            .append("circle");

        var circleAttributes = circles
            .attr("cx", 50)
            .attr("cy", 50)
            .attr("r", function (d) { return d; })
            .style("fill", function (d) {
                if (d === 40) { return "green"; }
                else if (d === 20) { return "purple"; }
                else if (d === 10) { return "red"; }
            });
    }

    function Example3() {
        // SVG element positioning with JSON data
        var jsonCircles = [
            { "x": 30, "y": 30, "radius": 20, "color": "green" },
            { "x": 70, "y": 70, "radius": 20, "color": "purple" },
            { "x": 110, "y": 110, "radius": 20, "color": "red" }];

        var svgContainer = d3.select(".row1")
            .append("svg")
            .attr("width", 200)
            .attr("height", 200);

        var circles = svgContainer.selectAll("circle")
            .data(jsonCircles)
            .enter()
            .append("circle");

        var circleAttributes = circles
            .attr("cx", function (d) { return d.x; })
            .attr("cy", function (d) { return d.y; })
            .attr("r", function (d) { return d.radius; })
            .style("fill", function (d) { return d.color; });
    }

    function Example4() {
        // Introductory example with SVG path
        var lineData = [
            { "x": 1, "y": 5 }, { "x": 20, "y": 20 },
            { "x": 40, "y": 10 }, { "x": 60, "y": 40 },
            { "x": 80, "y": 5 }, { "x": 100, "y": 60 }];

        var lineFunction = d3.svg.line()
            .x(function (d) { return d.x; })
            .y(function (d) { return d.y; })
            .interpolate("linear");

        var svgContainer = d3.select(".row1")
            .append("svg")
            .attr("width", 200)
            .attr("height", 200);

        var lineGraph = svgContainer.append("path")
            .attr("d", lineFunction(lineData))
            .attr("stroke", "blue")
            .attr("stroke-width", 2)
            .attr("fill", "none");
    }

    function Example5() {
        // Using D3 scaling
        var initialData = [0, 1000, 3000, 2000, 5000, 4000, 7000, 6000, 9000, 8000, 10000];

        var linearScaler = d3.scale.linear()
            .domain([d3.min(initialData), d3.max(initialData)])
            .range([0, 200]);

        var axis = d3.svg.axis().scale(linearScaler);

        var svgContainer = d3.select(".row1")
            .append("svg")
            .attr("width", 200)
            .attr("height", 200);

        var circles = svgContainer.selectAll("circle")
            .data(initialData)
            .enter()
            .append("circle");

        var circleAttributes = circles
            .attr("cx", function (d) { return linearScaler(d); })
            .attr("cy", function (d) { return linearScaler(d); })
            .attr("r", 10)
            .style("fill", "purple");
    }

    function Example6() {
        // SVG grouping and transforms
        var circleData = [
            { "cx": 20, "cy": 20, "radius": 20, "color": "green" },
            { "cx": 70, "cy": 70, "radius": 20, "color": "purple" }];

        var rectangleData = [
            { "rx": 110, "ry": 110, "height": 30, "width": 30, "color": "blue" },
            { "rx": 160, "ry": 160, "height": 30, "width": 30, "color": "red" }];

        var svgContainer = d3.select(".row1")
            .append("svg")
            .attr("width", 200)
            .attr("height", 200);

        var circleGroup = svgContainer.append("g")
            .attr("transform", "translate(80,0)");

        var circles = circleGroup.selectAll("circle")
            .data(circleData)
            .enter()
            .append("circle");

        var circleAttributes = circles
            .attr("cx", function (d) { return d.cx; })
            .attr("cy", function (d) { return d.cy; })
            .attr("r", function (d) { return d.radius; })
            .style("fill", function (d) { return d.color; });

        var rectangles = svgContainer.selectAll("rect")
            .data(rectangleData)
            .enter()
            .append("rect");

        var rectangleAttributes = rectangles
            .attr("x", function (d) { return d.rx; })
            .attr("y", function (d) { return d.ry; })
            .attr("height", function (d) { return d.height; })
            .attr("width", function (d) { return d.width; })
            .style("fill", function (d) { return d.color; });
    }

    function Example7() {
        // Create a chart
        var data = [4, 8, 15, 16, 23, 42];
        var width = 960, barHeight = 50;

        var x = d3.scale.linear()
            .domain([0, d3.max(data)])
            .range([0, width]);

        var chart = d3.select(".row2")
            .append("svg")
            .attr("width", width)
            .attr("height", barHeight * data.length);

        var bar = chart.selectAll("g")
            .data(data)
            .enter()
            .append("g")
            .attr("transform", function (d, i) { return "translate(0," + i * barHeight + ")"; });

        bar.append("rect")
            .attr("width", x)
            .attr("height", barHeight - 1);

        bar.append("text")
            .attr("x", function (d) { return x(d) - 3; })
            .attr("y", barHeight / 2)
            .attr("dy", ".35em")
            .text(function (d) { return d; });
    }

    function Example8() {
        // Create a better chart
        var dataPath = $("#dataPath").val();

        var margin = { top: 20, right: 30, bottom: 30, left: 40 },
            width = 960 - margin.left - margin.right,
            height = 500 - margin.top - margin.bottom;

        var x = d3.scale.ordinal()
            .rangeRoundBands([0, width], .1);

        var y = d3.scale.linear()
            .range([height, 0]);

        var xAxis = d3.svg.axis()
            .scale(x)
            .orient("bottom");

        var yAxis = d3.svg.axis()
            .scale(y)
            .orient("left")
            .ticks(10, "%");

        var chart = d3.select(".row3")
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        d3.tsv(dataPath, type, function (error, data) {
            x.domain(data.map(function (d) { return d.letter; }));
            y.domain([0, d3.max(data, function (d) { return d.frequency; })]);

            chart.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis);

            chart.append("g")
                .attr("class", "y axis")
                .call(yAxis);

            chart.append("g")
                .attr("class", "y axis")
                .call(yAxis)
                .append("text")
                .attr("transform", "rotate(-90)")
                .attr("y", 6)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Frequency");

            chart.selectAll(".bar")
                .data(data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", function (d) { return x(d.letter); })
                .attr("y", function (d) { return y(d.frequency); })
                .attr("height", function (d) { return height - y(d.frequency); })
                .attr("width", x.rangeBand());
        });
    }

    function type(d) {
        d.value = +d.value; // coerce to number
        return d;
    }
</script>

<style>
    .chart rect {
        fill: steelblue;
    }

    .chart text {
        fill: white;
        font: 10px sans-serif;
        text-anchor: end;
    }

    .bar {
        fill: steelblue;
    }

    .bar:hover {
        fill: brown;
    }

    .axis {
        font: 10px sans-serif;
    }

    .axis path, .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {
        display: none;
    }
</style>

<div class="container-fluid">
    <h1 class="page-header">@ViewBag.Title</h1>

    <p>
        This page demonstrates some visualizations using the popular D3.js library. This first section covers a
        really basic exploration of defining, styling, and transforming SVG objects using data and D3.
    </p>

    <br />

    <div class="row1"></div>

    <br />

    <div class="row2 chart"></div>

    <br />

    <div class="row3"></div>

    <input type="hidden" id="dataPath" value="@Url.Content("~/Content/app/data/letters.tsv")" />
</div>
