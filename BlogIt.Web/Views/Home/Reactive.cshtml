@model BlogIt.Web.Models.Shared.BaseViewModel

@{
    ViewBag.Title = "Reactive Extensions Demo";
}

@Scripts.Render("~/bundles/rx")

<script>
    $(function () {
        // Single-value observable
        function Ex1() {
            clear();
            $("<p/>").text("Example of a static single-value observable.")
                .appendTo("#description");
            var answer = Rx.Observable.return(42);
            var observer = Rx.Observer.create(function (x) {
                $("#content").append("The answer is " + x);
            });
            answer.subscribe(observer);
        }

        // Observable sequence
        function Ex2() {
            clear();
            $("<p/>").text("Example of a sequence of events as a cold observable.").appendTo("#description");
            var source = Rx.Observable.range(1, 10);
            var subscription = source.subscribe(
                function (next) {
                    $("<p/>").html("OnNext: " + next).appendTo("#content");
                },
                function (exn) {
                    $("<p/>").html("OnError: " + exn).appendTo("#content");
                },
                function () {
                    $("<p/>").html("OnCompleted").appendTo("#content");
                }
            );
        }

        // Importing DOM events
        function Ex3() {
            clear();
            $("<p/>").text("Observable wired to mouse movement (filtered to only capture events where x == y) " +
                "and key presses in the text box.")
                .appendTo("#description");
            var moves = $(document).mousemoveAsObservable()
                .select(function (event) {
                    return { pageX: event.pageX, pageY: event.pageY };
                })
                .where(function (pos) {
                    return pos.pageX === pos.pageY;
                });
            var input = $("#textbox").keyupAsObservable()
                .select(function (event) {
                    return $(event.target).val();
                });
            var movesSubscription = moves.subscribe(function (pos) {
                $("<p/>").text("X: " + pos.pageX + " Y: " + pos.pageY).appendTo("#content");
            });
            var inputSubscription = input.subscribe(function (text) {
                $("<p/>").text("User wrote: " + text).appendTo("#content");
            });
        }

        // More query operators
        function Ex4() {
            clear();
            $("<p/>").text("Observable that captures key presses but with throttled input and only if the value changed")
                .appendTo("#description");
            var input = $("#textbox").keyupAsObservable()
                .select(function (event) {
                    return $(event.target).val();
                })
                .throttle(250)
                .distinctUntilChanged();
            var inputSubscription = input.subscribe(function (text) {
                $("<p/>").text("User wrote: " + text).appendTo("#content");
            });
        }

        // Dictionary service using Wikipedia API
        function Ex5() {
            clear();
            $("<p/>").text("Observable that uses the Wikipedia dictionary to return phrase matches to text box input.")
                .appendTo("#description");
            var terms = $("#textbox").keyupAsObservable()
                .select(function (event) {
                    return $(event.target).val();
                })
                .throttle(250);
            var searchObservable = terms.selectMany(searchWikipedia);
            searchObservable.subscribe(function (results) {
                $("#results").empty();
                $.each(results, function (_, result) {
                    $("#results").append("<li>" + result + "</li>");
                });
            },
            function (e) { $("#error").text(e); });
        }

        function searchWikipedia(term) {
            return $.ajaxAsObservable({
                url: "http://en.wikipedia.org/w/api.php",
                dataType: "jsonp",
                data: {
                    action: "opensearch",
                    search: term,
                    format: "json"
                }
            })
            .select(function (d) { return d.data[1]; });
        }

        function clear() {
            $("#description").html('');
            $("#content").html('');
            $("#results").html('');
            $("#error").html('');
        }

        $("#button1").click(Ex1);
        $("#button2").click(Ex2);
        $("#button3").click(Ex3);
        $("#button4").click(Ex4);
        $("#button5").click(Ex5);
    });
</script>

<div class="container-fluid">
    <h1 class="page-header">@ViewBag.Title</h1>

    <p>
        This page imports the reactive extensions for javascript packages and runs through some examples.  The reactive
        extensions (Rx) are a set of libraries for composing asyncronous and event-based programs into observable
        collections.
    </p>

    <br />

    <div class="row">
        <div class="col-md-1"><div id="button1" class="btn btn-default">Exercise 1</div></div>
        <div class="col-md-1"><div id="button2" class="btn btn-default">Exercise 2</div></div>
        <div class="col-md-1"><div id="button3" class="btn btn-default">Exercise 3</div></div>
        <div class="col-md-1"><div id="button4" class="btn btn-default">Exercise 4</div></div>
        <div class="col-md-1"><div id="button5" class="btn btn-default">Exercise 5</div></div>
    </div>

    <br /><br />

    <p id="description">
        Click a button to run one of the exercises.
    </p>

    <br /><br />

    <input id="textbox" type="text" class="text-box" />

    <br /><br />

    <div id="content"></div>
    <ul id="results" />
    <p id="error" />
</div>
